/* HT-UIkit scss 1.0.0 */
/* Base: UIkit 3.1.7 | http://www.getuikit.com */ 
/* Edit: Hentech */

@import "config/_font.scss";
@import "config/_colors.scss";
@import "config/_layout.scss";

$button-height-default: 38px;
$button-height-large: 53px;
$button-height-small: 28px;

$button-icon-default: 20px;
$button-icon-large: 20px;
$button-icon-small: 18px;

$button-padding-default: 30px;
$button-padding-large: 40px;
$button-padding-small: 15px;

/* ========================================================================
   Component: Button
 ========================================================================== */
/*
 * 1. Remove margins in Chrome, Safari and Opera.
 * 2. Remove borders for `button`.
 * 3. Address `overflow` set to `hidden` in IE.
 * 4. Correct `font` properties and `color` not being inherited for `button`.
 * 5. Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 6. Style
 * 7. `line-height` is used to create a height because it also centers the text vertically for `a` elements.
 *    Better would be to use height and flexbox to center the text vertically but flexbox doesn't work in Firefox on `button` elements.
 * 8. Align text if button has a width
 * 9. Required for `a`.
 */
.uk-button, button, input[type="button"] {
  /* 1 */
  margin: 0;
  /* 2 */
  // border: none;
  /* 3 */
  overflow: visible;
  /* 4 */
  font: inherit;
  /* 5 */
  text-transform: none;
  /* 6 */
  display: inline-block;
  box-sizing: border-box;

  vertical-align: middle;
  font-size: 0.875rem;
  /* 7 */

  /* 8 */
  text-align: center;
  /* 9 */
  text-decoration: none;
  text-transform: uppercase;
  transition: 0.1s ease-in-out;
  transition-property: color, background-color, border-color;
  &:not(:disabled) {
    cursor: pointer;
  }
  position: relative;

  /* Sizing */
  &:not(.uk-button-large):not(.uk-button-small):not(.uk-icon-button) {
    padding: 0 #{$button-padding-default};
    line-height: $button-height-default;
    > * {
      margin-inline-start: -$button-icon-default;
      &:first-child {
        padding-inline-start: $button-icon-default;
      }
      &:not(:last-child) {
        padding-inline-end: calc(#{$button-icon-default} + 4px);
      }
      & + .uk-icon {
        position:absolute;
        height: $button-icon-default;
        width: $button-icon-default;
        top: calc((#{$button-height-default} - #{$button-icon-default})/2);
        bottom: calc((#{$button-height-default} - #{$button-icon-default})/2);
        right: $button-padding-default;
      }
    }
  }
  &.uk-button-large {
    padding: 0 #{$button-padding-large};
    line-height: $button-height-large;
    > * {
      margin-inline-start: -$button-icon-large;
      &:first-child {
        padding-inline-start: $button-icon-large;
      }
      &:not(:last-child) {
        padding-inline-end: calc(#{$button-icon-large} + 4px);
      }
      & + .uk-icon {
        position:absolute;
        height: $button-icon-large;
        width: $button-icon-large;
        top: calc((#{$button-height-large} - #{$button-icon-large})/2);
        bottom: calc((#{$button-height-large} - #{$button-icon-large})/2);
        right: $button-padding-large;
      }
    }
  }
  &.uk-button-small {
    padding: 0 #{$button-padding-small};
    line-height: $button-height-small;
    > * {
      margin-inline-start: -$button-icon-small;
      &:first-child {
        padding-inline-start: $button-icon-small;
      }
      &:not(:last-child) {
        padding-inline-end: calc(#{$button-icon-small} + 4px);
      }
      & + .uk-icon {
        position:absolute;
        height: $button-icon-small;
        width: $button-icon-small;
        top: calc((#{$button-height-small} - #{$button-icon-small})/2);
        bottom: calc((#{$button-height-small} - #{$button-icon-small})/2);
        right: $button-padding-small;
      }
    }
  }
}
/*
 * default color inherit each of base theme
 */
a.uk-button {
  &:active,&:hover,&:focus {
    color: map-get($base-color, heading);
  }
}
.uk-button, button, input[type="button"] {
  &:not(.uk-button-primary):not(.uk-button-secondary):not(.uk-button-accent):not(.uk-button-danger) {
    border: solid 1px map-get($base-color, dent);
    color: map-get($base-color, heading);
    background-color: inherit;
    &:active,&:hover,&:focus {
      border-color: darken(map-get($base-color, dent), 30%);
    }
  }
}
.ht-bicolor {
  a.uk-button,&a.uk-button {
    color: map-get($bicolor-color, heading);
  }
  .uk-button, button, input[type="button"],
  &.uk-button, &button, &input[type="button"] {
    &:not(.uk-button-primary):not(.uk-button-secondary):not(.uk-button-accent):not(.uk-button-danger) {
      border: solid 1px map-get($bicolor-color, dent);
      color: map-get($bicolor-color, heading);
      background-color: inherit;
      &:active,&:hover,&:focus {
        border-color: darken(map-get($bicolor-color, dent), 30%);
      }
    }
  }
}
.ht-tricolor {
  a.uk-button,&a.uk-button {
    color: map-get($tricolor-color, heading);
  }
  .uk-button, button, input[type="button"],
  &.uk-button, &button, &input[type="button"] {
    &:not(.uk-button-primary):not(.uk-button-secondary):not(.uk-button-accent):not(.uk-button-danger) {
      border: solid 1px map-get($tricolor-color, dent);
      color: map-get($tricolor-color, heading);
      background-color: inherit;
      &:active,&:hover,&:focus {
        border-color: darken(map-get($tricolor-color, dent), 30%);
      }
    }
  }
}
.ht-toolbar {
  a.uk-button,&a.uk-button {
    color: map-get($toolbar-color, heading);
  }
  .uk-button, button, input[type="button"],
  &.uk-button, &button, &input[type="button"] {
    &:not(.uk-button-primary):not(.uk-button-secondary):not(.uk-button-accent):not(.uk-button-danger) {
      border: solid 1px map-get($toolbar-color, dent);
      color: map-get($toolbar-color, heading);
      background-color: inherit;
      &:active,&:hover,&:focus {
        border-color: darken(map-get($toolbar-color, dent), 30%);
      }
    }
  }
}
.ht-danger {
  a.uk-button,&a.uk-button {
    color: map-get($danger-color, heading);
  }
  .uk-button, button, input[type="button"],
  &.uk-button, &button, &input[type="button"] {
    &:not(.uk-button-primary):not(.uk-button-secondary):not(.uk-button-accent):not(.uk-button-danger) {
      border: solid 1px map-get($danger-color, dent);
      color: map-get($danger-color, heading);
      background-color: inherit;
      &:active,&:hover,&:focus {
        border-color: darken(map-get($danger-color, dent), 30%);
      }
    }
  }
}
.ht-base {
  a.uk-button,&a.uk-button {
    color: map-get($base-color, heading);
  }
  .uk-button, button, input[type="button"],
  &.uk-button, &button, &input[type="button"] {
    &:not(.uk-button-primary):not(.uk-button-secondary):not(.uk-button-accent):not(.uk-button-danger) {
      border: solid 1px map-get($base-color, dent);
      color: map-get($base-color, heading);
      background-color: inherit;
      &:active,&:hover,&:focus {
        border-color: darken(map-get($base-color, dent), 30%);
      }
    }
  }
}

/*
 * Remove the inner border and padding in Firefox.
 */
.uk-button::-moz-focus-inner {
  border: 0;
  padding: 0;
}
/* Hover */
.uk-button:hover {
  /* 9 */
  text-decoration: none;
}
/* Focus */
.uk-button:focus {
  outline: none;
}
/* Colors
 ========================================================================== */
.uk-button-primary,.uk-button-secondary,
.uk-button-accent,.uk-button-danger {
  border: none;
}
/*
 * Primary
 */
.uk-button-primary {
  background-color: map-get($primary-color, basis);
  color: map-get($primary-color, text);
  &:hover,&:focus{
    background-color: map-get($primary-color, ontouch);
  }
  &:active {
    background-color: map-get($primary-color, active);
  }
}
/*
 * Secondary
 */
.uk-button-secondary {
  background-color: map-get($secondary-color, basis);
  color: map-get($secondary-color, text);
  &:hover,&:focus{
    background-color: map-get($secondary-color, ontouch);
  }
  &:active {
    background-color: map-get($secondary-color, active);
  }
}
/*
 * Accent
 */
.uk-button-accent {
  background-color: map-get($accent-color, basis);
  color: map-get($accent-color, text);
  &:hover,&:focus{
    background-color: map-get($accent-color, ontouch);
  }
  &:active {
    background-color: map-get($accent-color, active);
  }
}
/*
 * Danger
 */
.uk-button-danger {
  background-color: map-get($danger-color, basis);
  color: map-get($danger-color, text);
  &:hover,&:focus{
    background-color: map-get($danger-color, ontouch);
  }
  &:active {
    background-color: map-get($danger-color, active);
  }
}
/*
 * Disabled
 * The same for all style modifiers
 */
.uk-button-default:disabled,
.uk-button-primary:disabled,
.uk-button-secondary:disabled,
.uk-button-danger:disabled {
  background-color: transparent;
  color: var(--sub-text-color);
  border-color: #e5e5e5;
}
/* Size modifiers
 ========================================================================== */
.uk-button-small {
  padding: 0 15px;
  line-height: 28px;
  font-size: 0.875rem;
}
.uk-button-large {
  padding: 0 40px;
  line-height: 53px;
  font-size: 0.875rem;
}
/* Text modifiers
 ========================================================================== */
/*
 * Text
 * 1. Reset
 * 2. Style
 */
.uk-button-text {
  /* 1 */
  padding: 0;
  line-height: 1.5;
  background: none;
  /* 2 */
  color: #333;
  position: relative;
}
.uk-button-text::before {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  right: 100%;
  border-bottom: 1px solid #333;
  transition: right 0.3s ease-out;
}
/* Hover + Focus */
.uk-button-text:hover,
.uk-button-text:focus {
  color: #333;
}
.uk-button-text:hover::before,
.uk-button-text:focus::before {
  right: 0;
}
/* Disabled */
.uk-button-text:disabled {
  color: var(--sub-text-color);
}
.uk-button-text:disabled::before {
  display: none;
}
/*
 * Link
 * 1. Reset
 * 2. Style
 */
.uk-button-link {
  /* 1 */
  padding: 0;
  line-height: 1.5;
  background: none;
  /* 2 */
  color: var(--text-color);
}
/* Hover + Focus */
.uk-button-link:hover,
.uk-button-link:focus {
  color: var(--sub-text-color);
  text-decoration: underline;
}
/* Disabled */
.uk-button-link:disabled {
  color: var(--sub-text-color);
  text-decoration: none;
}
/* Group
 ========================================================================== */
/*
 * 1. Using `flex` instead of `inline-block` to prevent whitespace betweent child elements
 * 2. Behave like button
 * 3. Create position context
 */
.uk-button-group {
  /* 1 */
  display: inline-flex;
  /* 2 */
  vertical-align: middle;
  /* 3 */
  position: relative;
}
/* Group
     ========================================================================== */
/*
     * Collapse border
     */
.uk-button-group > .uk-button:nth-child(n+2),
.uk-button-group > div:nth-child(n+2) .uk-button {
  margin-left: -1px;
}
/*
     * Create position context to superimpose the successor elements border
     * Known issue: If you use an `a` element as button and an icon inside,
     * the active state will not work if you click the icon inside the button
     * Workaround: Just use a `button` or `input` element as button
     */
.uk-button-group .uk-button:hover,
.uk-button-group .uk-button:focus,
.uk-button-group .uk-button:active,
.uk-button-group .uk-button.uk-active {
  position: relative;
  z-index: 1;
}